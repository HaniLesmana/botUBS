from cmath import log
import logging
import telebot
from datetime import date
from tabulate import tabulate
import mysql.connector
from telebot import types
from telegram import ReplyKeyboardMarkup, Update, ReplyKeyboardRemove, InlineKeyboardButton
import telegram
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
)
mydb = mysql.connector.connect(
    host = 'localhost',
    user = 'root',
    password = '',
    database= 'dbubs'
)
sql = mydb.cursor()
# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)
reply_keyboard = [
    ['Ya', 'Tidak'],
]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
today = date.today()
question,step1, step2, hitungNilai,stepAdmin1, stepAdminCreate,stepAdminRead = range(7)

def start(update: Update, context: CallbackContext) -> int:
    """Start the conversation and ask user for input."""        
    req_contact = [ 
        [telegram.KeyboardButton('Share contact', request_contact=True)]
    ]
    markup2 = ReplyKeyboardMarkup(req_contact, one_time_keyboard=True)
    update.message.reply_text(
        "Hi! My name is Doctor Botter. Please share your phone number to start this survei",reply_markup=markup2
    )        
    ctrPertanyaan = 0    
    return step1

def cekData(update: Update, context: CallbackContext) -> int:
    """Ask the user for info about the selected predefined choice."""            
    contact = update.effective_message.contact
    phone = contact.phone_number   
    print(phone)
    sql.execute("select * from karyawan where phone_number = '{}' ".format(phone))
    hasil_sql = sql.fetchall()
    if phone == '+62895800288077' :
        context.user_data['nik'] = "hasil_sql[0][0]"
        context.user_data['nama'] = "hasil_sql[0][1]"
        context.user_data['ctrPertanyaan'] = 0
        context.user_data['jawaban'] = 0 
        update.message.reply_text(f'Halo, Admin. Please click "/continue" to start')
        return stepAdmin1

    if len(hasil_sql)<=0 :
        update.message.reply_text('Maaf, Anda tidak terdaftar', reply_markup=ReplyKeyboardRemove())
    else:        
        d3 = today.strftime("%y/%m/%d")
        sql.execute("select * from data_survey where phone_number = '{}' and tanggal_isi = '{}' ".format(phone,d3))
        data_survey = sql.fetchall()
        if len(data_survey)>0:
            update.message.reply_text(f'Halo, {hasil_sql[0][1]}. Anda telah mengisi survey hari ini')    
        else:
            context.user_data['nik'] = hasil_sql[0][0]
            context.user_data['nama'] = hasil_sql[0][1]
            context.user_data['ctrPertanyaan'] = 0
            context.user_data['jawaban'] = 0 
            update.message.reply_text(f'Halo, {hasil_sql[0][1]}. Please click "/continue" to start')
            return question

    # text = ""
    # nik = ""
    # password = ""
    # format_salah = False
    # try:
    #     text = update.message.text.split("-") 
    #     nik = text[0]
    #     password = text[1]
    # except:
    #     format_salah = True
    #     update.message.reply_text('Format salah (Contoh : "30123534345-password")')
    # sql.execute("select * from karyawan where nik = '{}' and password = '{}' ".format(nik,password))
    # hasil_sql = sql.fetchall()
    # if (nik=="admin") and (password=="admin") and format_salah == False:
    #     context.user_data['nik'] = "admin"
    #     context.user_data['password'] = "admin"
    #     context.user_data['nama'] = "Admin"        
    #     update.message.reply_text(f'Halo, Admin! Please click "/continue" to start')
    #     return stepAdmin1    
    # if len(hasil_sql)<=0 and format_salah == False:
    #     update.message.reply_text('User tidak ada')    
    # else:
    #     d3 = today.strftime("%y/%m/%d")
    #     sql.execute("select * from data_survey where nik = '{}' and tanggal_isi = '{}' ".format(nik,d3))
    #     data_survey = sql.fetchall()
    #     if len(data_survey)>0:
    #         update.message.reply_text(f'Halo, {hasil_sql[0][1]}. Anda telah mengisi survey hari ini')    
    #     else:
    #         context.user_data['nik'] = nik
    #         context.user_data['password'] = password
    #         context.user_data['nama'] = hasil_sql[0][1]
    #         context.user_data['ctrPertanyaan'] = 0
    #         context.user_data['jawaban'] = 0 
    #         update.message.reply_text(f'Halo, {hasil_sql[0][1]}. Please click "/continue" to start')
    #         return question    

def admin1(update: Update, context: CallbackContext) -> int:
    keyboard = [
        ["1. Create","2. Read","3. Update","4. Delete"],
    ]           
    markupadmin1 = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    if len(context.user_data)>0:
        update.message.reply_text(
            'Admin Ingin apa? \n 1. Create Pertanyaan \n 2. Read Pertanyaan \n 3. Update Pertanyaan \n 4. Delete Pertanyaan',reply_markup=markupadmin1 
        )
        return stepAdminCreate
    else :
        update.message.reply_text(
            'Please click "/start"' 
        )

def adminCreate(update: Update, context: CallbackContext) -> int:
    format_salah = False
    if len(context.user_data)>0:
        if update.message.text == "/done":
            return stepAdmin1
        else :
            update.message.reply_text(
                'Inputkan pertanyaan! (Format : pertanyaan-nilai), Click /done untuk stop' 
            )            
            if update.message.text != "1. Create":                
                try:
                    text = update.message.text.split("-") 
                    pertanyaan = text[0]
                    nilai = text[1]  
                except:
                    format_salah = True
                    update.message.reply_text('Format salah (Contoh : "pertanyaan-nilai")')
                
                if format_salah == False :            
                    sql.execute("select count(*) from data_pertanyaan")
                    hasilquery = sql.fetchone()
                    hasil = str((hasilquery[0]+1))
                    id = "P_"+(hasil).zfill(3)
                    query = "INSERT INTO data_pertanyaan (ID_pertanyaan, pertanyaan, nilai) VALUES (%s, %s, %s)"
                    val = (id, pertanyaan, nilai)
                    sql.execute(query, val) 
                    mydb.commit()
            return stepAdminCreate
    else :
        update.message.reply_text(
            'Please click "/start"' 
        )
def adminRead(update: Update, context: CallbackContext) -> int:
    if len(context.user_data)>0:        
        sql.execute("SELECT * from data_pertanyaan")
        hasil = sql.fetchall()
        col_names = ["Id    ","               Pertanyaan             "," Nilai "]
        # temp = []
        # for i in range(len(hasil)):
        #     temp.append("ID Pertanyaan : "+ str(hasil[i][0])+ " pertanyaan: "+ str(hasil[i][1])+ "nilai : "+ str(hasil[i][2]))                 
        update.message.reply_text(
            tabulate(hasil, headers=col_names)
        )
    else :
        update.message.reply_text(
            'Please click "/start"' 
        )

def adminUpdate(update: Update, context: CallbackContext) -> int:
    if len(context.user_data)>0:        
        sql.execute("SELECT * from data_pertanyaan")
        hasil = sql.fetchall()
        col_names = ["Id    ","               Pertanyaan             "," Nilai "]
        # temp = []
        # for i in range(len(hasil)):
        #     temp.append("ID Pertanyaan : "+ str(hasil[i][0])+ " pertanyaan: "+ str(hasil[i][1])+ "nilai : "+ str(hasil[i][2]))                 
        update.message.reply_text(
            tabulate(hasil, headers=col_names)
        )
    else :
        update.message.reply_text(
            'Please click "/start"' 
        )
def quest1(update: Update, context: CallbackContext) -> int:    
    if len(context.user_data)>0:        
        ctr = context.user_data["ctrPertanyaan"]      
        sql.execute("SELECT * from data_pertanyaan")
        hasil = sql.fetchall()
        if ctr>0 :
            if update.message.text == "Ya" :   
                context.user_data["jawaban"] = context.user_data["jawaban"] + hasil[ctr-1][2]
                  
        if ctr < len(hasil):
            update.message.reply_text(
                hasil[ctr][1] ,reply_markup=markup 
            )
            context.user_data["ctrPertanyaan"] = ctr+1      
            return question        
        else:                         
            update.message.reply_text(
                context.user_data["jawaban"],reply_markup=ReplyKeyboardRemove()
            )            
            d3 = today.strftime("%y/%m/%d")
            query = "INSERT INTO data_survey (NIK, tanggal_isi, skor) VALUES (%s, %s, %s)"
            val = (context.user_data["nik"],d3 , context.user_data["jawaban"])
            sql.execute(query, val) 
            mydb.commit()
            return hitungNilai  
                    
    else :
        update.message.reply_text(
            'Please click "/start"' 
        )

def quest2(update: Update, context: CallbackContext) -> int:
    if len(context.user_data)>0:
        update.message.reply_text(
            'BERES',reply_markup=markup 
        )        
    else :
        update.message.reply_text(
            'Please click "/start"'
        )

def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater("5178114629:AAEAYhJz1XRZSjiXfmJIP_AFFNdC6c1nwUQ")
    # regex (nik-password) (\d{16})[-](\w)
    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher
    # Add conversation handler with the states CHOOSING, TYPING_CHOICE and TYPING_REPLY
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            stepAdmin1: [                
                MessageHandler(
                    Filters.text & ~(Filters.command), cekData
                ),
                MessageHandler(Filters.regex('^(/continue|/done)$'), admin1),                
            ],
            stepAdminCreate: [                
                MessageHandler(Filters.regex('^2. Read$'), adminRead),
                MessageHandler(Filters.regex('^(1. Create$|\w)'), adminCreate),                
            ],
            stepAdminRead: [
                MessageHandler(
                    Filters.text & ~(Filters.command), adminRead
                ),             
            ],
            step1: [
                MessageHandler(Filters.contact, cekData),
                MessageHandler(
                    Filters.text & ~(Filters.contact), cekData
                ),
                
            ],
            question : [
                MessageHandler(Filters.regex('^(/continue|Ya|Tidak)$'), quest1)                         
            ],
            hitungNilai : [
                MessageHandler(Filters.regex('^(/continue|Ya|Tidak)$'), quest2)                         
            ]

        },
        fallbacks=[MessageHandler(Filters.regex('^Done$'),cekData)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    main()